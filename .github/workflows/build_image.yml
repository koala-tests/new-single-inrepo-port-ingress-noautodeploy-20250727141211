# Build container image and push to registry

name: Build Image & Push to Registry

on:
  workflow_call:
    inputs:
      tag:
        description: "The image tag to use"
        required: true
        type: string
      ref:
        description: "The git ref to use"
        required: false
        type: string
      service_dir:
        description: "Relative path to the service directory"
        required: false
        type: string
        default: "."
      service_name:
        description: "The name of the service"
        required: false
        type: string
    outputs:
      tag:
        description: "The tag used in practice. If the input tag is empty, determined by branch."
        value: ${{ jobs.build.outputs.tag }}
  workflow_dispatch:
    inputs:
      tag:
        description: "The image tag to use, leave empty to use branch default"
        required: false
        type: string
      ref:
        description: "The git ref to use"
        required: false
        type: string
      service_dir:
        description: "Relative path to the service directory"
        required: false
        type: string
        default: "."
      service_name:
        description: "The name of the service"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE: "ghcr.io/fake-org/fake-registry/${{ inputs.service_name }}"
      INPUT_TAG: ${{ inputs.tag }}
      INPUT_SERVICE_NAME: ${{ inputs.service_name }}
      GIT_CODE_REF: ${{ inputs.ref || github.ref }}
      GCP_PROJECT_ID: ""
      GITHUB_EVENT_PULL_REQUEST_HEAD_REF: ${{ github.event.pull_request.head.ref }}
      # Prepare Docker login credentials: https://github.com/docker/login-action
      
      REGISTRY: ghcr.io
      REGISTRY_USERNAME: ${{github.actor}}
      REGISTRY_PASSWORD: ${{secrets.GITHUB_TOKEN}}
      
    outputs:
      tag: ${{ steps.image_tag.outputs.tag }}
    permissions:
      contents: "write"
      id-token: "write"
      packages: "write"

    steps:
      - name: Print inputs
        run: |
          echo "tag: $INPUT_TAG"
          echo "ref: ${{ inputs.ref }}"
          echo "service_dir: ${{ inputs.service_dir }}"
          echo "service_name: $INPUT_SERVICE_NAME"

      - uses: actions/checkout@v4
        id: "checkout-workflows"
        with:
          path: "workflows"
          sparse-checkout: .github

      - uses: actions/checkout@v4
        id: "checkout-code"
        with:
          ref: ${{ env.GIT_CODE_REF }}
          path: "code"
          
      - name: Determine image tag
        id: image_tag
        uses: ./workflows/.github/actions/determine-image-tag
        with:
          custom_tag: ${{ inputs.tag }}
          tag_format: "branch-date-counter"
          include_counter: "true"

      - uses: ./workflows/.github/actions/build
        name: Build
        with:
          goreleaser_args: "release --clean --snapshot"
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          service_dir: ${{ inputs.service_dir }}

      # Docker tag on just created image
      - name: Docker tag image
        run: docker tag $IMAGE:latest $IMAGE:$TAG

      
        # Login to Docker registry
        # https://cloud.google.com/artifact-registry/docs/docker/authentication#json-key
        # https://github.com/docker/login-action#service-account-based-authentication-1
      - name: Login to Github Docker Image Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
          

      - name: Push to Docker registry
        run: |
          docker push $IMAGE:$TAG
          if ${{ github.ref == 'ref/heads/main' }}; then
            docker push $IMAGE:latest
          fi
      - name: Create git tag
        id: create_git_tag
        working-directory: "code"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$TAG" \
          --target "$COMMIT_HASH" \
          --title "$TAG" \
          --notes "Built service $INPUT_SERVICE_NAME" \
          --prerelease=true
